package cz.inseo.netbeans.github.gist;

import cz.inseo.netbeans.github.gist.tree.IconCellRenderer;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import cz.inseo.netbeans.github.gist.tree.GistsTree;
import cz.inseo.netbeans.github.options.GithubOptions;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//cz.inseo.netbeans.github.gist//Gist//EN",
autostore = false)
@TopComponent.Description(preferredID = "GistTopComponent",
iconBase="/cz/inseo/netbeans/github/resources/images/g-icon.png", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "navigator", openAtStartup = false)
@ActionID(category = "Window", id = "cz.inseo.netbeans.github.gist.GistTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_GistAction",
preferredID = "GistTopComponent")
public final class GistTopComponent extends TopComponent {
	
	private GistsTree gistTree;

	public GistTopComponent() {
		initComponents();
		setName(NbBundle.getMessage(GistTopComponent.class, "CTL_GistTopComponent"));
		setToolTipText(NbBundle.getMessage(GistTopComponent.class, "HINT_GistTopComponent"));
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        String title = NbBundle.getMessage(GistTopComponent.class, "GistTopComponent.gistTree.root.title");
        String userName = GithubOptions.getInstance().getLogin();
        javax.swing.JTree gistTree = new GistsTree(title, userName);

        org.openide.awt.Mnemonics.setLocalizedText(newButton, org.openide.util.NbBundle.getMessage(GistTopComponent.class, "GistTopComponent.newButton.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(refreshButton, org.openide.util.NbBundle.getMessage(GistTopComponent.class, "GistTopComponent.refreshButton.text")); // NOI18N
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(gistTree);
        this.gistTree = (GistsTree) gistTree;

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                        .addComponent(refreshButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newButton)
                    .addComponent(refreshButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
		gistTree.reload();
	}//GEN-LAST:event_refreshButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newButton;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables

	@Override
	public void componentOpened() {
		
	}

	@Override
	public void componentClosed() {
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}

	void readProperties(java.util.Properties p) {
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}

	private void initTree() {
		
		String title = NbBundle.getMessage(GistTopComponent.class, "GistTopComponent.gistTree.root.title");
		DefaultMutableTreeNode top = new DefaultMutableTreeNode(title);

		TreeCellRenderer renderer = new IconCellRenderer();
		//gistTree.setCellRenderer(renderer);
		
		DefaultTreeModel treeModel = new DefaultTreeModel(top);
		//gistTree.setModel(treeModel);

		/*
				Map<String, GistFile> files = gist.getFiles();
				if (!files.isEmpty()) {
					Iterator iterator = files.keySet().iterator();// Iterate on keys
					FileNode fileNode;
					DefaultMutableTreeNode childNode;

					while (iterator.hasNext()) {
						String key = (String) iterator.next();
						fileNode = new FileNode(files.get(key));
						childNode = new DefaultMutableTreeNode(fileNode);
						//FileUtil.getMIMEType(null)


						try {
						
						FileSystem mfs = FileUtil.createMemoryFileSystem();
						FileObject gFolder = mfs.getRoot().createFolder(gist.getId());
						FileObject fob = gFolder.createData("mujsoubor", "txt");
						//OutputStream oStream = fob.getOutputStream();
						 
						String content = files.get(key).getRawUrl();
						InputStream openStream = new URL(content).openStream();
						InputStreamReader reader = new InputStreamReader(openStream);
						InfoDialog.showInfo(reader.getEncoding());
						
						try {
						Gson gson = new Gson();
						String fromJson = gson.fromJson(reader, String.class);
						InfoDialog.showInfo(fromJson);
						} catch (JsonParseException jpe) {
						throw new IOException(jpe.getMessage());
						} finally {
						try {
						reader.close();
						} catch (IOException ignored) {
						// Ignored
						}
						}


						reader.close();

						openStream.read();
						if (content != null) {
							InfoDialog.showInfo(content);
							/*	oStream.write();
							oStream.flush();
							oStream.close();
						}
						/*
						DataObject data = DataObject.find(fob);
						EditorCookie cookie = data.getCookie(EditorCookie.class);
						cookie.open();
						
						} catch (DataObjectNotFoundException ex) {
						Exceptions.printStackTrace(ex);
						} catch (IOException ex) {
						Exceptions.printStackTrace(ex);
						}



						node.add(childNode);
					}*/
			

		

	}
/*
	private void reloadTree() {
		DefaultTreeModel treeModel = (DefaultTreeModel) gistTree.getModel();
		DefaultMutableTreeNode top = (DefaultMutableTreeNode) treeModel.getRoot();


		GistService gistService = GithubAuth.getGistService();
		String user = GithubOptions.getInstance().getLogin();

		try {
			List<Gist> gists = gistService.getGists(user);
			DefaultMutableTreeNode gNode;

			top.removeAllChildren();

			for (Iterator<Gist> it = gists.iterator(); it.hasNext();) {
				Gist gist = it.next();
				gNode = new DefaultMutableTreeNode(new GistNode(gist));
				top.add(gNode);
			}
			
			treeModel.reload(top);
		} catch (IOException ex) {
			Exceptions.printStackTrace(ex);
		}
	}*/
	
}

