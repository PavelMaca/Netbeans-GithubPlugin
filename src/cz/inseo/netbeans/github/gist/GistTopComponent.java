package cz.inseo.netbeans.github.gist;

import cz.inseo.netbeans.github.GithubAuth;
import cz.inseo.netbeans.github.gist.tree.GistNode;
import cz.inseo.netbeans.github.gist.tree.GistTree;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;

import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;

import cz.inseo.netbeans.github.gist.tree.GistTree;
import cz.inseo.netbeans.github.gist.tree.IconData;
import cz.inseo.netbeans.github.options.GithubOptions;
import cz.inseo.netbeans.github.tools.InfoDialog;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.eclipse.egit.github.core.Gist;
import org.eclipse.egit.github.core.service.GistService;
import org.openide.util.Exceptions;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//cz.inseo.netbeans.github.gist//Gist//EN",
autostore = false)
@TopComponent.Description(preferredID = "GistTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "rightSlidingSide", openAtStartup = false)
@ActionID(category = "Window", id = "cz.inseo.netbeans.github.gist.GistTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_GistAction",
preferredID = "GistTopComponent")
public final class GistTopComponent extends TopComponent {
		
	public GistTopComponent(){
		initComponents();
		setName(NbBundle.getMessage(GistTopComponent.class, "CTL_GistTopComponent"));
		setToolTipText(NbBundle.getMessage(GistTopComponent.class, "HINT_GistTopComponent"));
				
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        GistTree gTree = new GistTree();
        gistTree = gTree.getTree();

        org.openide.awt.Mnemonics.setLocalizedText(newButton, org.openide.util.NbBundle.getMessage(GistTopComponent.class, "GistTopComponent.newButton.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(refreshButton, org.openide.util.NbBundle.getMessage(GistTopComponent.class, "GistTopComponent.refreshButton.text")); // NOI18N
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(gistTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                        .addComponent(refreshButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newButton)
                    .addComponent(refreshButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
		String title = NbBundle.getMessage(GistTree.class, "GistTree.title");
		DefaultMutableTreeNode top = new DefaultMutableTreeNode(new IconData(GistTree.ICON_ROOT, null, title));

		DefaultTreeModel m_model = new DefaultTreeModel(top);
		
		DefaultMutableTreeNode node;
		GistService gistService = GithubAuth.getGistService();

		List<Gist> gists;
		try {
			gists = gistService.getGists(GithubOptions.getInstance().getLogin());
			for (Iterator<Gist> it = gists.iterator(); it.hasNext();) {
				Gist gist = it.next();

				ImageIcon icon;

				if (gist.isPublic() == true) {
					icon = GistTree.ICON_PUBLIC;
				} else {
					icon =  GistTree.ICON_PRIVATE;
				}

				node = new DefaultMutableTreeNode(new IconData(icon, null, new GistNode(gist)));
				top.add(node);
				node.add(new DefaultMutableTreeNode(true));

			}
		} catch (IOException ex) {
			Exceptions.printStackTrace(ex);
		}
		
		gistTree.setModel(m_model);
	}//GEN-LAST:event_refreshButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree gistTree;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newButton;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables
	@Override
	public void componentOpened() {
		// TODO add custom code on component opening
	}

	@Override
	public void componentClosed() {
		// TODO add custom code on component closing
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}

	void readProperties(java.util.Properties p) {
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}
}
